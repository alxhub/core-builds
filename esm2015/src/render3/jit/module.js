/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { WrappedNodeExpr, compileNgModule as compileR3NgModule, jitExpression } from '@angular/compiler';
import { flatten } from '../util';
import { angularCoreEnv } from './environment';
const /** @type {?} */ EMPTY_ARRAY = [];
/**
 * @param {?} type
 * @param {?} ngModule
 * @return {?}
 */
export function compileNgModule(type, ngModule) {
    const /** @type {?} */ meta = {
        type: wrap(type),
        bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY).map(wrap),
        declarations: flatten(ngModule.declarations || EMPTY_ARRAY).map(wrap),
        imports: flatten(ngModule.imports || EMPTY_ARRAY).map(expandModuleWithProviders).map(wrap),
        exports: flatten(ngModule.exports || EMPTY_ARRAY).map(expandModuleWithProviders).map(wrap),
        emitInline: true,
    };
    // Compute transitiveCompileScope
    const /** @type {?} */ transitiveCompileScope = {
        directives: /** @type {?} */ ([]),
        pipes: /** @type {?} */ ([]),
    };
    /**
     * @param {?} module
     * @return {?}
     */
    function addExportsFrom(module) {
        module.ngModuleDef.exports.forEach((exp) => {
            if (isNgModule(exp)) {
                addExportsFrom(exp);
            }
            else if (exp.ngPipeDef) {
                transitiveCompileScope.pipes.push(exp);
            }
            else {
                transitiveCompileScope.directives.push(exp);
            }
        });
    }
    flatten([(ngModule.imports || EMPTY_ARRAY), (ngModule.exports || EMPTY_ARRAY)])
        .filter(importExport => isNgModule(importExport))
        .forEach(mod => addExportsFrom(mod));
    flatten(ngModule.declarations || EMPTY_ARRAY).forEach(decl => {
        if (decl.ngPipeDef) {
            transitiveCompileScope.pipes.push(decl);
        }
        else if (decl.ngComponentDef) {
            transitiveCompileScope.directives.push(decl);
            patchComponentWithScope(decl, /** @type {?} */ (type));
        }
        else {
            transitiveCompileScope.directives.push(decl);
            decl.ngSelectorScope = type;
        }
    });
    let /** @type {?} */ def = null;
    Object.defineProperty(type, 'ngModuleDef', {
        get: () => {
            if (def === null) {
                const /** @type {?} */ meta = {
                    type: wrap(type),
                    bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY).map(wrap),
                    declarations: flatten(ngModule.declarations || EMPTY_ARRAY).map(wrap),
                    imports: flatten(ngModule.imports || EMPTY_ARRAY).map(expandModuleWithProviders).map(wrap),
                    exports: flatten(ngModule.exports || EMPTY_ARRAY).map(expandModuleWithProviders).map(wrap),
                    emitInline: true,
                };
                const /** @type {?} */ res = compileR3NgModule(meta);
                def = jitExpression(res.expression, angularCoreEnv, `ng://${type.name}/ngModuleDef.js`);
                def.transitiveCompileScope = transitiveCompileScope;
            }
            return def;
        },
    });
}
/**
 * @template C, M
 * @param {?} component
 * @param {?} module
 * @return {?}
 */
export function patchComponentWithScope(component, module) {
    component.ngComponentDef.directiveDefs = () => /** @type {?} */ ((module.ngModuleDef.transitiveCompileScope)).directives.map(dir => dir.ngDirectiveDef || dir.ngComponentDef).filter(def => !!def);
    component.ngComponentDef.pipeDefs = () => /** @type {?} */ ((module.ngModuleDef.transitiveCompileScope)).pipes.map(pipe => pipe.ngPipeDef);
}
/**
 * @param {?} value
 * @return {?}
 */
function expandModuleWithProviders(value) {
    if (isModuleWithProviders(value)) {
        return value.ngModule;
    }
    return value;
}
/**
 * @param {?} value
 * @return {?}
 */
function wrap(value) {
    return new WrappedNodeExpr(value);
}
/**
 * @param {?} value
 * @return {?}
 */
function isModuleWithProviders(value) {
    return value.ngModule !== undefined;
}
/**
 * @param {?} value
 * @return {?}
 */
function isNgModule(value) {
    return value.ngModuleDef !== undefined;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvcmVuZGVyMy9qaXQvbW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUFpQyxlQUFlLEVBQUUsZUFBZSxJQUFJLGlCQUFpQixFQUFFLGFBQWEsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBS3ZJLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFFaEMsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUU3Qyx1QkFBTSxXQUFXLEdBQWdCLEVBQUUsQ0FBQzs7Ozs7O0FBRXBDLE1BQU0sMEJBQTBCLElBQWUsRUFBRSxRQUFrQjtJQUNqRSx1QkFBTSxJQUFJLEdBQXVCO1FBQy9CLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ2hCLFNBQVMsRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLFNBQVMsSUFBSSxXQUFXLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQy9ELFlBQVksRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLFlBQVksSUFBSSxXQUFXLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQ3JFLE9BQU8sRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sSUFBSSxXQUFXLENBQUMsQ0FBQyxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQzFGLE9BQU8sRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sSUFBSSxXQUFXLENBQUMsQ0FBQyxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQzFGLFVBQVUsRUFBRSxJQUFJO0tBQ2pCLENBQUM7O0lBR0YsdUJBQU0sc0JBQXNCLEdBQUc7UUFDN0IsVUFBVSxvQkFBRSxF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c0JBQXNCLEdBQUcsc0JBQXNCLENBQUM7YUFDckQ7WUFDRCxPQUFPLEdBQUcsQ0FBQztTQUNaO0tBQ0YsQ0FBQyxDQUFDO0NBQ0o7Ozs7Ozs7QUFFRCxNQUFNLGtDQUNGLFNBQXFELEVBQ3JELE1BQThDO0lBQ2hELFNBQVMsQ0FBQyxjQUFjLENBQUMsYUFBYSxHQUFHLEdBQUcsRUFBRSxvQkFDMUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxzQkFBc0IsR0FBRyxVQUFVLENBQ2pELEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxjQUFjLElBQUksR0FBRyxDQUFDLGNBQWMsRUFDbkQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzlCLFNBQVMsQ0FBQyxjQUFjLENBQUMsUUFBUSxHQUFHLEdBQUcsRUFBRSxvQkFDckMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxzQkFBc0IsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0NBQ25GOzs7OztBQUVELG1DQUFtQyxLQUFxQztJQUN0RSxJQUFJLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ2hDLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQztLQUN2QjtJQUNELE9BQU8sS0FBSyxDQUFDO0NBQ2Q7Ozs7O0FBRUQsY0FBYyxLQUFnQjtJQUM1QixPQUFPLElBQUksZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ25DOzs7OztBQUVELCtCQUErQixLQUFVO0lBQ3ZDLE9BQU8sS0FBSyxDQUFDLFFBQVEsS0FBSyxTQUFTLENBQUM7Q0FDckM7Ozs7O0FBRUQsb0JBQW9CLEtBQVU7SUFDNUIsT0FBTyxLQUFLLENBQUMsV0FBVyxLQUFLLFNBQVMsQ0FBQztDQUN4QyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtFeHByZXNzaW9uLCBSM05nTW9kdWxlTWV0YWRhdGEsIFdyYXBwZWROb2RlRXhwciwgY29tcGlsZU5nTW9kdWxlIGFzIGNvbXBpbGVSM05nTW9kdWxlLCBqaXRFeHByZXNzaW9ufSBmcm9tICdAYW5ndWxhci9jb21waWxlcic7XG5cbmltcG9ydCB7TW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUsIE5nTW9kdWxlRGVmfSBmcm9tICcuLi8uLi9tZXRhZGF0YS9uZ19tb2R1bGUnO1xuaW1wb3J0IHtUeXBlfSBmcm9tICcuLi8uLi90eXBlJztcbmltcG9ydCB7Q29tcG9uZW50RGVmfSBmcm9tICcuLi9pbnRlcmZhY2VzL2RlZmluaXRpb24nO1xuaW1wb3J0IHtmbGF0dGVufSBmcm9tICcuLi91dGlsJztcblxuaW1wb3J0IHthbmd1bGFyQ29yZUVudn0gZnJvbSAnLi9lbnZpcm9ubWVudCc7XG5cbmNvbnN0IEVNUFRZX0FSUkFZOiBUeXBlPGFueT5bXSA9IFtdO1xuXG5leHBvcnQgZnVuY3Rpb24gY29tcGlsZU5nTW9kdWxlKHR5cGU6IFR5cGU8YW55PiwgbmdNb2R1bGU6IE5nTW9kdWxlKTogdm9pZCB7XG4gIGNvbnN0IG1ldGE6IFIzTmdNb2R1bGVNZXRhZGF0YSA9IHtcbiAgICB0eXBlOiB3cmFwKHR5cGUpLFxuICAgIGJvb3RzdHJhcDogZmxhdHRlbihuZ01vZHVsZS5ib290c3RyYXAgfHwgRU1QVFlfQVJSQVkpLm1hcCh3cmFwKSxcbiAgICBkZWNsYXJhdGlvbnM6IGZsYXR0ZW4obmdNb2R1bGUuZGVjbGFyYXRpb25zIHx8IEVNUFRZX0FSUkFZKS5tYXAod3JhcCksXG4gICAgaW1wb3J0czogZmxhdHRlbihuZ01vZHVsZS5pbXBvcnRzIHx8IEVNUFRZX0FSUkFZKS5tYXAoZXhwYW5kTW9kdWxlV2l0aFByb3ZpZGVycykubWFwKHdyYXApLFxuICAgIGV4cG9ydHM6IGZsYXR0ZW4obmdNb2R1bGUuZXhwb3J0cyB8fCBFTVBUWV9BUlJBWSkubWFwKGV4cGFuZE1vZHVsZVdpdGhQcm92aWRlcnMpLm1hcCh3cmFwKSxcbiAgICBlbWl0SW5saW5lOiB0cnVlLFxuICB9O1xuXG4gIC8vIENvbXB1dGUgdHJhbnNpdGl2ZUNvbXBpbGVTY29wZVxuICBjb25zdCB0cmFuc2l0aXZlQ29tcGlsZVNjb3BlID0ge1xuICAgIGRpcmVjdGl2ZXM6IFtdIGFzIGFueVtdLFxuICAgIHBpcGVzOiBbXSBhcyBhbnlbXSxcbiAgfTtcblxuICBmdW5jdGlvbiBhZGRFeHBvcnRzRnJvbShtb2R1bGU6IFR5cGU8YW55PiYge25nTW9kdWxlRGVmOiBOZ01vZHVsZURlZjxhbnk+fSk6IHZvaWQge1xuICAgIG1vZHVsZS5uZ01vZHVsZURlZi5leHBvcnRzLmZvckVhY2goKGV4cDogYW55KSA9PiB7XG4gICAgICBpZiAoaXNOZ01vZHVsZShleHApKSB7XG4gICAgICAgIGFkZEV4cG9ydHNGcm9tKGV4cCk7XG4gICAgICB9IGVsc2UgaWYgKGV4cC5uZ1BpcGVEZWYpIHtcbiAgICAgICAgdHJhbnNpdGl2ZUNvbXBpbGVTY29wZS5waXBlcy5wdXNoKGV4cCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFuc2l0aXZlQ29tcGlsZVNjb3BlLmRpcmVjdGl2ZXMucHVzaChleHApO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZmxhdHRlbihbKG5nTW9kdWxlLmltcG9ydHMgfHwgRU1QVFlfQVJSQVkpLCAobmdNb2R1bGUuZXhwb3J0cyB8fCBFTVBUWV9BUlJBWSldKVxuICAgICAgLmZpbHRlcihpbXBvcnRFeHBvcnQgPT4gaXNOZ01vZHVsZShpbXBvcnRFeHBvcnQpKVxuICAgICAgLmZvckVhY2gobW9kID0+IGFkZEV4cG9ydHNGcm9tKG1vZCkpO1xuXG4gIGZsYXR0ZW4obmdNb2R1bGUuZGVjbGFyYXRpb25zIHx8IEVNUFRZX0FSUkFZKS5mb3JFYWNoKGRlY2wgPT4ge1xuICAgIGlmIChkZWNsLm5nUGlwZURlZikge1xuICAgICAgdHJhbnNpdGl2ZUNvbXBpbGVTY29wZS5waXBlcy5wdXNoKGRlY2wpO1xuICAgIH0gZWxzZSBpZiAoZGVjbC5uZ0NvbXBvbmVudERlZikge1xuICAgICAgdHJhbnNpdGl2ZUNvbXBpbGVTY29wZS5kaXJlY3RpdmVzLnB1c2goZGVjbCk7XG4gICAgICBwYXRjaENvbXBvbmVudFdpdGhTY29wZShkZWNsLCB0eXBlIGFzIGFueSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYW5zaXRpdmVDb21waWxlU2NvcGUuZGlyZWN0aXZlcy5wdXNoKGRlY2wpO1xuICAgICAgZGVjbC5uZ1NlbGVjdG9yU2NvcGUgPSB0eXBlO1xuICAgIH1cbiAgfSk7XG5cbiAgbGV0IGRlZjogYW55ID0gbnVsbDtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHR5cGUsICduZ01vZHVsZURlZicsIHtcbiAgICBnZXQ6ICgpID0+IHtcbiAgICAgIGlmIChkZWYgPT09IG51bGwpIHtcbiAgICAgICAgY29uc3QgbWV0YTogUjNOZ01vZHVsZU1ldGFkYXRhID0ge1xuICAgICAgICAgIHR5cGU6IHdyYXAodHlwZSksXG4gICAgICAgICAgYm9vdHN0cmFwOiBmbGF0dGVuKG5nTW9kdWxlLmJvb3RzdHJhcCB8fCBFTVBUWV9BUlJBWSkubWFwKHdyYXApLFxuICAgICAgICAgIGRlY2xhcmF0aW9uczogZmxhdHRlbihuZ01vZHVsZS5kZWNsYXJhdGlvbnMgfHwgRU1QVFlfQVJSQVkpLm1hcCh3cmFwKSxcbiAgICAgICAgICBpbXBvcnRzOlxuICAgICAgICAgICAgICBmbGF0dGVuKG5nTW9kdWxlLmltcG9ydHMgfHwgRU1QVFlfQVJSQVkpLm1hcChleHBhbmRNb2R1bGVXaXRoUHJvdmlkZXJzKS5tYXAod3JhcCksXG4gICAgICAgICAgZXhwb3J0czpcbiAgICAgICAgICAgICAgZmxhdHRlbihuZ01vZHVsZS5leHBvcnRzIHx8IEVNUFRZX0FSUkFZKS5tYXAoZXhwYW5kTW9kdWxlV2l0aFByb3ZpZGVycykubWFwKHdyYXApLFxuICAgICAgICAgIGVtaXRJbmxpbmU6IHRydWUsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlcyA9IGNvbXBpbGVSM05nTW9kdWxlKG1ldGEpO1xuICAgICAgICBkZWYgPSBqaXRFeHByZXNzaW9uKHJlcy5leHByZXNzaW9uLCBhbmd1bGFyQ29yZUVudiwgYG5nOi8vJHt0eXBlLm5hbWV9L25nTW9kdWxlRGVmLmpzYCk7XG4gICAgICAgIGRlZi50cmFuc2l0aXZlQ29tcGlsZVNjb3BlID0gdHJhbnNpdGl2ZUNvbXBpbGVTY29wZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWY7XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXRjaENvbXBvbmVudFdpdGhTY29wZTxDLCBNPihcbiAgICBjb21wb25lbnQ6IFR5cGU8Qz4mIHtuZ0NvbXBvbmVudERlZjogQ29tcG9uZW50RGVmPEM+fSxcbiAgICBtb2R1bGU6IFR5cGU8TT4mIHtuZ01vZHVsZURlZjogTmdNb2R1bGVEZWY8TT59KSB7XG4gIGNvbXBvbmVudC5uZ0NvbXBvbmVudERlZi5kaXJlY3RpdmVEZWZzID0gKCkgPT5cbiAgICAgIG1vZHVsZS5uZ01vZHVsZURlZi50cmFuc2l0aXZlQ29tcGlsZVNjb3BlICEuZGlyZWN0aXZlc1xuICAgICAgICAgIC5tYXAoZGlyID0+IGRpci5uZ0RpcmVjdGl2ZURlZiB8fCBkaXIubmdDb21wb25lbnREZWYpXG4gICAgICAgICAgLmZpbHRlcihkZWYgPT4gISFkZWYpO1xuICBjb21wb25lbnQubmdDb21wb25lbnREZWYucGlwZURlZnMgPSAoKSA9PlxuICAgICAgbW9kdWxlLm5nTW9kdWxlRGVmLnRyYW5zaXRpdmVDb21waWxlU2NvcGUgIS5waXBlcy5tYXAocGlwZSA9PiBwaXBlLm5nUGlwZURlZik7XG59XG5cbmZ1bmN0aW9uIGV4cGFuZE1vZHVsZVdpdGhQcm92aWRlcnModmFsdWU6IFR5cGU8YW55PnwgTW9kdWxlV2l0aFByb3ZpZGVycyk6IFR5cGU8YW55PiB7XG4gIGlmIChpc01vZHVsZVdpdGhQcm92aWRlcnModmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlLm5nTW9kdWxlO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gd3JhcCh2YWx1ZTogVHlwZTxhbnk+KTogRXhwcmVzc2lvbiB7XG4gIHJldHVybiBuZXcgV3JhcHBlZE5vZGVFeHByKHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gaXNNb2R1bGVXaXRoUHJvdmlkZXJzKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgcmV0dXJuIHZhbHVlLm5nTW9kdWxlICE9PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGlzTmdNb2R1bGUodmFsdWU6IGFueSk6IHZhbHVlIGlzIFR5cGU8YW55PiZ7bmdNb2R1bGVEZWY6IE5nTW9kdWxlRGVmPGFueT59IHtcbiAgcmV0dXJuIHZhbHVlLm5nTW9kdWxlRGVmICE9PSB1bmRlZmluZWQ7XG59XG4iXX0=