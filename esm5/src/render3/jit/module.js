/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { WrappedNodeExpr, compileNgModule as compileR3NgModule, jitExpression } from '@angular/compiler';
import { flatten } from '../util';
import { angularCoreEnv } from './environment';
var EMPTY_ARRAY = [];
export function compileNgModule(type, ngModule) {
    var meta = {
        type: wrap(type),
        bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY).map(wrap),
        declarations: flatten(ngModule.declarations || EMPTY_ARRAY).map(wrap),
        imports: flatten(ngModule.imports || EMPTY_ARRAY).map(expandModuleWithProviders).map(wrap),
        exports: flatten(ngModule.exports || EMPTY_ARRAY).map(expandModuleWithProviders).map(wrap),
        emitInline: true,
    };
    // Compute transitiveCompileScope
    var transitiveCompileScope = {
        directives: [],
        pipes: [],
    };
    function addExportsFrom(module) {
        module.ngModuleDef.exports.forEach(function (exp) {
            if (isNgModule(exp)) {
                addExportsFrom(exp);
            }
            else if (exp.ngPipeDef) {
                transitiveCompileScope.pipes.push(exp);
            }
            else {
                transitiveCompileScope.directives.push(exp);
            }
        });
    }
    flatten([(ngModule.imports || EMPTY_ARRAY), (ngModule.exports || EMPTY_ARRAY)])
        .filter(function (importExport) { return isNgModule(importExport); })
        .forEach(function (mod) { return addExportsFrom(mod); });
    flatten(ngModule.declarations || EMPTY_ARRAY).forEach(function (decl) {
        if (decl.ngPipeDef) {
            transitiveCompileScope.pipes.push(decl);
        }
        else if (decl.ngComponentDef) {
            transitiveCompileScope.directives.push(decl);
            patchComponentWithScope(decl, type);
        }
        else {
            transitiveCompileScope.directives.push(decl);
            decl.ngSelectorScope = type;
        }
    });
    var def = null;
    Object.defineProperty(type, 'ngModuleDef', {
        get: function () {
            if (def === null) {
                var meta_1 = {
                    type: wrap(type),
                    bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY).map(wrap),
                    declarations: flatten(ngModule.declarations || EMPTY_ARRAY).map(wrap),
                    imports: flatten(ngModule.imports || EMPTY_ARRAY).map(expandModuleWithProviders).map(wrap),
                    exports: flatten(ngModule.exports || EMPTY_ARRAY).map(expandModuleWithProviders).map(wrap),
                    emitInline: true,
                };
                var res = compileR3NgModule(meta_1);
                def = jitExpression(res.expression, angularCoreEnv, "ng://" + type.name + "/ngModuleDef.js");
                def.transitiveCompileScope = transitiveCompileScope;
            }
            return def;
        },
    });
}
export function patchComponentWithScope(component, module) {
    component.ngComponentDef.directiveDefs = function () {
        return module.ngModuleDef.transitiveCompileScope.directives
            .map(function (dir) { return dir.ngDirectiveDef || dir.ngComponentDef; })
            .filter(function (def) { return !!def; });
    };
    component.ngComponentDef.pipeDefs = function () {
        return module.ngModuleDef.transitiveCompileScope.pipes.map(function (pipe) { return pipe.ngPipeDef; });
    };
}
function expandModuleWithProviders(value) {
    if (isModuleWithProviders(value)) {
        return value.ngModule;
    }
    return value;
}
function wrap(value) {
    return new WrappedNodeExpr(value);
}
function isModuleWithProviders(value) {
    return value.ngModule !== undefined;
}
function isNgModule(value) {
    return value.ngModuleDef !== undefined;
}

//# sourceMappingURL=data:application/json;base64,